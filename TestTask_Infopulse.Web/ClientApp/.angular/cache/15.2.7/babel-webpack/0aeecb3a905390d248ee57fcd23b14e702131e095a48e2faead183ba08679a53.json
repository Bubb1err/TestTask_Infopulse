{"ast":null,"code":"import { BehaviorSubject, Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class CreateOrderService {\n  constructor(http, baseUrl) {\n    this.http = http;\n    this.baseUrl = baseUrl;\n    this._openForm = new BehaviorSubject(false);\n    this.openForm$ = this._openForm.asObservable();\n    this._backToOrders = new Subject();\n    this.lastOrderNumberSubject = new Subject();\n    this.lastOrderNumber$ = this.lastOrderNumberSubject.asObservable();\n  }\n  setLastOrderNumber(lastOrderNumber) {\n    this.lastOrderNumberSubject.next(lastOrderNumber);\n  }\n  get backToOrders$() {\n    return this._backToOrders.asObservable();\n  }\n  triggerBackToOrders() {\n    this._backToOrders.next();\n  }\n  setOpenForm(value) {\n    this._openForm.next(value);\n  }\n  getSelectListCustomers() {\n    return this.http.get(this.baseUrl + 'select-customers');\n  }\n  getSelectListStatuses() {\n    return this.http.get(this.baseUrl + 'statuses');\n  }\n}\nCreateOrderService.ɵfac = function CreateOrderService_Factory(t) {\n  return new (t || CreateOrderService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n};\nCreateOrderService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: CreateOrderService,\n  factory: CreateOrderService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,eAAe,EAAcC,OAAO,QAAQ,MAAM;;;AAO3D,OAAM,MAAOC,kBAAkB;EAG7BC,YAAoBC,IAAgB,EAA8BC,OAAe;IAA7D,SAAI,GAAJD,IAAI;IAA0C,YAAO,GAAPC,OAAO;IAFjE,cAAS,GAAG,IAAIL,eAAe,CAAU,KAAK,CAAC;IACvD,cAAS,GAAG,IAAI,CAACM,SAAS,CAACC,YAAY,EAAE;IAGjC,kBAAa,GAAG,IAAIN,OAAO,EAAQ;IACnC,2BAAsB,GAAG,IAAIA,OAAO,EAAU;IAEtD,qBAAgB,GAAG,IAAI,CAACO,sBAAsB,CAACD,YAAY,EAAE;EALwB;EAOrFE,kBAAkB,CAACC,eAAuB;IACxC,IAAI,CAACF,sBAAsB,CAACG,IAAI,CAACD,eAAe,CAAC;EACnD;EACA,IAAIE,aAAa;IACf,OAAO,IAAI,CAACC,aAAa,CAACN,YAAY,EAAE;EAC1C;EACAO,mBAAmB;IACjB,IAAI,CAACD,aAAa,CAACF,IAAI,EAAE;EAC3B;EACAI,WAAW,CAACC,KAAc;IACxB,IAAI,CAACV,SAAS,CAACK,IAAI,CAACK,KAAK,CAAC;EAC5B;EACAC,sBAAsB;IACpB,OAAO,IAAI,CAACb,IAAI,CAACc,GAAG,CAAwB,IAAI,CAACb,OAAO,GAAG,kBAAkB,CAAC;EAChF;EACAc,qBAAqB;IACnB,OAAO,IAAI,CAACf,IAAI,CAACc,GAAG,CAAY,IAAI,CAACb,OAAO,GAAG,UAAU,CAAC;EAC5D;;AA3BWH,kBAAkB;mBAAlBA,kBAAkB,0CAGiB,UAAU;AAAA;AAH7CA,kBAAkB;SAAlBA,kBAAkB;EAAAkB,SAAlBlB,kBAAkB;EAAAmB,YAFjB;AAAM","names":["BehaviorSubject","Subject","CreateOrderService","constructor","http","baseUrl","_openForm","asObservable","lastOrderNumberSubject","setLastOrderNumber","lastOrderNumber","next","backToOrders$","_backToOrders","triggerBackToOrders","setOpenForm","value","getSelectListCustomers","get","getSelectListStatuses","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\timce\\source\\repos\\TestTask_Infopulse\\TestTask_Infopulse.Web\\ClientApp\\src\\app\\services\\create-order.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Inject, Injectable } from '@angular/core';\r\nimport { BehaviorSubject, Observable, Subject } from 'rxjs';\r\nimport { ISelectListCustomer } from '../models/selectListCustomer';\r\nimport { IStatus } from '../models/status';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CreateOrderService {\r\n  private _openForm = new BehaviorSubject<boolean>(false);\r\n  openForm$ = this._openForm.asObservable();\r\n  constructor(private http: HttpClient, @Inject('BASE_URL') private baseUrl: string) { }\r\n\r\n  private _backToOrders = new Subject<void>();\r\n  private lastOrderNumberSubject = new Subject<number>();\r\n\r\n  lastOrderNumber$ = this.lastOrderNumberSubject.asObservable();\r\n\r\n  setLastOrderNumber(lastOrderNumber: number) {\r\n    this.lastOrderNumberSubject.next(lastOrderNumber);\r\n  }\r\n  get backToOrders$() {\r\n    return this._backToOrders.asObservable();\r\n  }\r\n  triggerBackToOrders() {\r\n    this._backToOrders.next();\r\n  }\r\n  setOpenForm(value: boolean) {\r\n    this._openForm.next(value);\r\n  }\r\n  getSelectListCustomers(): Observable<ISelectListCustomer[]> {\r\n    return this.http.get<ISelectListCustomer[]>(this.baseUrl + 'select-customers')\r\n  }\r\n  getSelectListStatuses(): Observable<IStatus[]> {\r\n    return this.http.get<IStatus[]>(this.baseUrl + 'statuses');\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}