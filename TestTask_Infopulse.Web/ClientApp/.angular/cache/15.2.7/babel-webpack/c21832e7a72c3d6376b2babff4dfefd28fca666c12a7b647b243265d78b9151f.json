{"ast":null,"code":"import { FormControl, FormGroup, Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/create-customer.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nfunction CreateCustomerComponent_p_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"p\");\n    i0.ɵɵtext(1, \"Please provide customer name.\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class CreateCustomerComponent {\n  get customerName() {\n    return this.form.controls.CustomerName;\n  }\n  //customerData: ICreateCustomer = {\n  //    CustomerName: \"\",\n  //    CustomerAddress: \"\"\n  //}; \n  constructor(customerService) {\n    this.customerService = customerService;\n    this.form = new FormGroup({\n      CustomerName: new FormControl('', [Validators.required, Validators.minLength(1)]),\n      CustomerAddress: new FormControl('')\n    });\n    this.formData = {\n      CustomerName: \"\",\n      Address: \"\"\n    };\n  }\n  ngOnInit() {\n    const today = new Date();\n    this.currentDate = today.toISOString().substring(0, 10);\n  }\n  backToCustomers() {\n    this.customerService.triggerCustomerCreated();\n  }\n  saveCustomer() {\n    if (this.form.valid) {\n      this.formData = {\n        CustomerName: this.form.value.CustomerName ?? '',\n        Address: this.form.value.CustomerAddress ?? ''\n      };\n    }\n    this.customerService.createCustomer(this.formData).subscribe(response => {\n      console.log('Customer created successfully', response);\n      this.customerService.triggerCustomerCreated();\n    }, error => {\n      console.error('Error creating customer', error);\n    });\n  }\n}\nCreateCustomerComponent.ɵfac = function CreateCustomerComponent_Factory(t) {\n  return new (t || CreateCustomerComponent)(i0.ɵɵdirectiveInject(i1.CreateCustomerService));\n};\nCreateCustomerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CreateCustomerComponent,\n  selectors: [[\"create-customer\"]],\n  decls: 22,\n  vars: 3,\n  consts: [[1, \"createCustomerFrom\", 3, \"formGroup\", \"ngSubmit\"], [1, \"createCustomerContent\"], [1, \"createCustomerField\"], [1, \"\"], [1, \"customerInput\"], [\"formControlName\", \"CustomerName\", 1, \"customerInput\"], [\"formControlName\", \"CustomerAddress\", 1, \"customerAddress\", \"customerInput\"], [4, \"ngIf\"], [\"type\", \"submit\"], [3, \"click\"]],\n  template: function CreateCustomerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\");\n      i0.ɵɵtext(1, \"New Customer\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function CreateCustomerComponent_Template_form_ngSubmit_2_listener() {\n        return ctx.saveCustomer();\n      });\n      i0.ɵɵelementStart(3, \"div\", 1)(4, \"div\", 2)(5, \"label\", 3);\n      i0.ɵɵtext(6, \"Created date:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"p\", 4);\n      i0.ɵɵtext(8);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(9, \"div\", 2)(10, \"label\");\n      i0.ɵɵtext(11, \"Customer Name:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(12, \"input\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"div\", 2)(14, \"label\");\n      i0.ɵɵtext(15, \"Address:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(16, \"textarea\", 6);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵtemplate(17, CreateCustomerComponent_p_17_Template, 2, 0, \"p\", 7);\n      i0.ɵɵelementStart(18, \"button\", 8);\n      i0.ɵɵtext(19, \"Save\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"button\", 9);\n      i0.ɵɵlistener(\"click\", function CreateCustomerComponent_Template_button_click_20_listener() {\n        return ctx.backToCustomers();\n      });\n      i0.ɵɵtext(21, \"Cancel\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"formGroup\", ctx.form);\n      i0.ɵɵadvance(6);\n      i0.ɵɵtextInterpolate(ctx.currentDate);\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"ngIf\", (ctx.customerName.errors == null ? null : ctx.customerName.errors.required) && ctx.customerName.touched);\n    }\n  },\n  dependencies: [i2.NgIf, i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.FormGroupDirective, i3.FormControlName],\n  styles: [\".createCustomerFrom[_ngcontent-%COMP%] {\\r\\n    display: flex;\\r\\n    flex-direction:column;\\r\\n}\\r\\n.createCustomerField[_ngcontent-%COMP%] {\\r\\n    display: flex;\\r\\n    justify-content: space-between;\\r\\n    margin-bottom: 1rem;\\r\\n}\\r\\n.createCustomerContent[_ngcontent-%COMP%] {\\r\\n    max-width: 50%;\\r\\n}\\r\\n.customerAddress[_ngcontent-%COMP%] {\\r\\n    height: 5rem;\\r\\n}\\r\\n.customerInput[_ngcontent-%COMP%] {\\r\\n    width: 70%;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY3JlYXRlLWN1c3RvbWVyL2NyZWF0ZS1jdXN0b21lci5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksYUFBYTtJQUNiLHFCQUFxQjtBQUN6QjtBQUNBO0lBQ0ksYUFBYTtJQUNiLDhCQUE4QjtJQUM5QixtQkFBbUI7QUFDdkI7QUFDQTtJQUNJLGNBQWM7QUFDbEI7QUFDQTtJQUNJLFlBQVk7QUFDaEI7QUFDQTtJQUNJLFVBQVU7QUFDZCIsInNvdXJjZXNDb250ZW50IjpbIi5jcmVhdGVDdXN0b21lckZyb20ge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGZsZXgtZGlyZWN0aW9uOmNvbHVtbjtcclxufVxyXG4uY3JlYXRlQ3VzdG9tZXJGaWVsZCB7XHJcbiAgICBkaXNwbGF5OiBmbGV4O1xyXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG4gICAgbWFyZ2luLWJvdHRvbTogMXJlbTtcclxufVxyXG4uY3JlYXRlQ3VzdG9tZXJDb250ZW50IHtcclxuICAgIG1heC13aWR0aDogNTAlO1xyXG59XHJcbi5jdXN0b21lckFkZHJlc3Mge1xyXG4gICAgaGVpZ2h0OiA1cmVtO1xyXG59XHJcbi5jdXN0b21lcklucHV0IHtcclxuICAgIHdpZHRoOiA3MCU7XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAASA,WAAW,EAAEC,SAAS,EAAEC,UAAU,QAAQ,gBAAgB;;;;;;;ICiBjEC,yBAEI;IAAAA,6CAA6B;IAAAA,iBAAI;;;ADTvC,OAAM,MAAOC,uBAAuB;EAelC,IAAIC,YAAY;IACd,OAAO,IAAI,CAACC,IAAI,CAACC,QAAQ,CAACC,YAA2B;EACvD;EAEA;EACA;EACA;EACA;EAEAC,YAAoBC,eAAsC;IAAtC,oBAAe,GAAfA,eAAe;IArBnC,SAAI,GAAG,IAAIT,SAAS,CAAC;MACnBO,YAAY,EAAE,IAAIR,WAAW,CAAS,EAAE,EAAE,CACxCE,UAAU,CAACS,QAAQ,EACnBT,UAAU,CAACU,SAAS,CAAC,CAAC,CAAC,CACxB,CAAC;MACFC,eAAe,EAAG,IAAIb,WAAW,CAAS,EAAE;KAC7C,CAAC;IACF,aAAQ,GAAoB;MACxBQ,YAAY,EAAE,EAAE;MAChBM,OAAO,EAAE;KACZ;EAW6D;EAC9DC,QAAQ;IACN,MAAMC,KAAK,GAAG,IAAIC,IAAI,EAAE;IACxB,IAAI,CAACC,WAAW,GAAGF,KAAK,CAACG,WAAW,EAAE,CAACC,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC;EACzD;EACAC,eAAe;IACb,IAAI,CAACX,eAAe,CAACY,sBAAsB,EAAE;EAC/C;EAEAC,YAAY;IACV,IAAI,IAAI,CAACjB,IAAI,CAACkB,KAAK,EAAE;MACnB,IAAI,CAACC,QAAQ,GAAG;QACdjB,YAAY,EAAE,IAAI,CAACF,IAAI,CAACoB,KAAK,CAAClB,YAAY,IAAI,EAAE;QAChDM,OAAO,EAAE,IAAI,CAACR,IAAI,CAACoB,KAAK,CAACb,eAAe,IAAI;OAC7C;;IAGH,IAAI,CAACH,eAAe,CAACiB,cAAc,CAAC,IAAI,CAACF,QAAQ,CAAC,CAACG,SAAS,CAC1DC,QAAQ,IAAG;MACTC,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEF,QAAQ,CAAC;MACtD,IAAI,CAACnB,eAAe,CAACY,sBAAsB,EAAE;IAC/C,CAAC,EACDU,KAAK,IAAG;MACNF,OAAO,CAACE,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD,CAAC,CACF;EACH;;AAlDW5B,uBAAuB;mBAAvBA,uBAAuB;AAAA;AAAvBA,uBAAuB;QAAvBA,uBAAuB;EAAA6B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCXpClC,0BAAI;MAAAA,4BAAY;MAAAA,iBAAK;MACrBA,+BAAgF;MAAvDA;QAAA,OAAYmC,kBAAc;MAAA,EAAC;MAClDnC,8BAAmC;MAEfA,6BAAa;MAAAA,iBAAQ;MACrCA,4BAAyB;MAAAA,YAAe;MAAAA,iBAAI;MAE9CA,8BAAiC;MACxBA,+BAAc;MAAAA,iBAAQ;MAC7BA,4BACwC;MAC1CA,iBAAM;MACNA,+BAAiC;MACxBA,yBAAQ;MAAAA,iBAAQ;MACvBA,+BACuD;MACzDA,iBAAM;MAERA,sEAEqC;MACrCA,kCAAsB;MAAAA,qBAAI;MAAAA,iBAAS;MACnCA,kCAAoC;MAA5BA;QAAA,OAASmC,qBAAiB;MAAA,EAAC;MAACnC,uBAAM;MAAAA,iBAAS;;;MArB/CA,eAAkB;MAAlBA,oCAAkB;MAIOA,eAAe;MAAfA,qCAAe;MAcxCA,eAA2D;MAA3DA,8HAA2D","names":["FormControl","FormGroup","Validators","i0","CreateCustomerComponent","customerName","form","controls","CustomerName","constructor","customerService","required","minLength","CustomerAddress","Address","ngOnInit","today","Date","currentDate","toISOString","substring","backToCustomers","triggerCustomerCreated","saveCustomer","valid","formData","value","createCustomer","subscribe","response","console","log","error","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\timce\\source\\repos\\TestTask_Infopulse\\TestTask_Infopulse.Web\\ClientApp\\src\\app\\create-customer\\create-customer.component.ts","C:\\Users\\timce\\source\\repos\\TestTask_Infopulse\\TestTask_Infopulse.Web\\ClientApp\\src\\app\\create-customer\\create-customer.component.html"],"sourcesContent":["import { Component, OnInit } from \"@angular/core\";\r\nimport { FormControl, FormGroup, Validators } from \"@angular/forms\";\r\nimport { ICreateCustomer } from \"../models/CreateCustomer\";\r\nimport { CreateCustomerService } from \"../services/create-customer.service\";\r\n\r\n@Component({\r\n  selector: 'create-customer',\r\n  templateUrl: './create-customer.component.html',\r\n  styleUrls: ['./create-customer.component.css']\r\n})\r\n\r\nexport class CreateCustomerComponent implements OnInit {\r\n  currentDate: string | undefined;\r\n\r\n  form = new FormGroup({\r\n    CustomerName: new FormControl<string>('', [\r\n      Validators.required,\r\n      Validators.minLength(1)\r\n    ]),\r\n    CustomerAddress:  new FormControl<string>('')\r\n  })\r\n  formData: ICreateCustomer = {\r\n      CustomerName: \"\",\r\n      Address: \"\"\r\n  };\r\n\r\n  get customerName() {\r\n    return this.form.controls.CustomerName as FormControl;\r\n  }\r\n\r\n  //customerData: ICreateCustomer = {\r\n  //    CustomerName: \"\",\r\n  //    CustomerAddress: \"\"\r\n  //}; \r\n\r\n  constructor(private customerService: CreateCustomerService) { }\r\n  ngOnInit(): void {\r\n    const today = new Date();\r\n    this.currentDate = today.toISOString().substring(0, 10); \r\n  }\r\n  backToCustomers() {\r\n    this.customerService.triggerCustomerCreated();\r\n  }\r\n\r\n  saveCustomer() {\r\n    if (this.form.valid) {\r\n      this.formData = {\r\n        CustomerName: this.form.value.CustomerName ?? '',\r\n        Address: this.form.value.CustomerAddress ?? ''\r\n      };\r\n    }\r\n\r\n    this.customerService.createCustomer(this.formData).subscribe(\r\n      response => {\r\n        console.log('Customer created successfully', response);\r\n        this.customerService.triggerCustomerCreated();\r\n      },\r\n      error => {\r\n        console.error('Error creating customer', error);\r\n      }\r\n    );\r\n  }\r\n}\r\n","<h1>New Customer</h1>\r\n<form [formGroup]=\"form\" (ngSubmit)=\"saveCustomer()\" class=\"createCustomerFrom\">\r\n  <div class=\"createCustomerContent\">\r\n    <div class=\"createCustomerField\">\r\n      <label class=\"\">Created date:</label>\r\n      <p class=\"customerInput\">{{currentDate}}</p>\r\n    </div>\r\n    <div class=\"createCustomerField\">\r\n      <label>Customer Name:</label>\r\n      <input class=\"customerInput\"\r\n             formControlName=\"CustomerName\" />\r\n    </div>\r\n    <div class=\"createCustomerField\">\r\n      <label>Address:</label>\r\n      <textarea class=\"customerAddress customerInput\"\r\n                formControlName=\"CustomerAddress\"></textarea>\r\n    </div>\r\n  </div>\r\n  <p\r\n     *ngIf=\"customerName.errors?.required && customerName.touched\"\r\n     >Please provide customer name.</p>\r\n  <button type=\"submit\">Save</button>\r\n  <button (click)=\"backToCustomers()\">Cancel</button>\r\n</form>\r\n\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}